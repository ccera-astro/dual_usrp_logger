options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: dual_usrp_logger
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: dyn_freq
  id: variable
  parameters:
    comment: ''
    value: flist[int(time.time()) % 2]+(0.0*pacer)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 484.0]
    rotation: 0
    state: true
- name: fftsize
  id: variable
  parameters:
    comment: ''
    value: '2048'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 12.0]
    rotation: 0
    state: true
- name: flist
  id: variable
  parameters:
    comment: ''
    value: '[freq1,freq2]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 500.0]
    rotation: 0
    state: true
- name: pacer
  id: variable_function_probe
  parameters:
    block_id: pacer_probe
    comment: ''
    function_args: ''
    function_name: level
    poll_rate: '1.0'
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 460.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: int(srate)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 12.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fftsize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 260.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fftsize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1056, 396.0]
    rotation: 0
    state: true
- name: blocks_head_0
  id: blocks_head
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: seconds*samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 204.0]
    rotation: 0
    state: true
- name: blocks_head_0_0
  id: blocks_head
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: seconds*samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 372.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int(samp_rate/fftsize/20)
    type: float
    vlen: fftsize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1520, 260.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int(samp_rate/fftsize/20)
    type: float
    vlen: fftsize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1512, 396.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: fftsize
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 260.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: fftsize
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 324.0]
    rotation: 0
    state: true
- name: device
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Device spec
    short_id: ''
    type: str
    value: '"type=b200,otw_format=sc8,num_recv_frames=512"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 68.0]
    rotation: 0
    state: true
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: fftsize
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(fftsize)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 220.0]
    rotation: 0
    state: true
- name: fft_vxx_0_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: fftsize
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(fftsize)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 372.0]
    rotation: 0
    state: true
- name: freq1
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: RF Frequency 1
    short_id: ''
    type: eng_float
    value: 1420.4058e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1840, 60.0]
    rotation: 0
    state: true
- name: freq2
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: RF Frequency 2
    short_id: ''
    type: eng_float
    value: 525e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1704, 172.0]
    rotation: 0
    state: true
- name: gain
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: RF Gain
    short_id: ''
    type: eng_float
    value: '60'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1736, 68.0]
    rotation: 0
    state: true
- name: logger_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\nimport ephem\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ fftsize=2048,prefix=\"./\",longitude=-76.03,logtime=10, frequency=1420.4058e6):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='FFT logger block',   # will show up in GRC\n  \
      \          in_sig=[(np.float32,fftsize)]*2,\n            out_sig=None\n\n  \
      \      )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.fftsize\
      \ = fftsize\n        self.prefix=prefix\n        #self.fft_a = np.zeros(self.fftsize,dtype=np.float32)\n\
      \        #self.fft_b = np.zeros(self.fftsize,dtype=np.float32)\n        self.last\
      \ = time.time()\n        self.fftcnt_a = 0\n        self.fftcnt_b = 0\n    \
      \    self.longitude = longitude\n        self.logtime = logtime\n        self.frequency\
      \ = frequency\n        self.myffts = {}\n        self.mycounts = {}\n      \
      \  self.current = self.frequency\n\n\n    # Given longitude(decimal degrees\
      \ as a float)\n    #\n    # Return the current sidereal time as a string with\n\
      \    #  \",\" separated tokens\n    #\n    def cur_sidereal(self,longitude):\n\
      \        longstr = \"%02d\" % int(longitude)\n        longstr = longstr + \"\
      :\"\n        longitude = abs(longitude)\n        frac = longitude - int(longitude)\n\
      \        frac *= 60\n        mins = int(frac)\n        longstr += \"%02d\" %\
      \ mins\n        longstr += \":00\"\n        x = ephem.Observer()\n        x.date\
      \ = ephem.now()\n        x.long = longstr\n        jdate = ephem.julian_date(x)\n\
      \        tokens=str(x.sidereal_time()).split(\":\")\n        hours=int(tokens[0])\n\
      \        minutes=int(tokens[1])\n        seconds=int(float(tokens[2]))\n   \
      \     sidt = \"%02d,%02d,%02d\" % (hours, minutes, seconds)\n        return\
      \ (sidt)\n        \n    def do_the_log(self, fn, tp, val, cf):\n        fp =\
      \ open(fn, \"a\")\n        fp.write(\"%02d,%02d,%02d,\" % (tp.tm_hour, tp.tm_min,\
      \ tp.tm_sec))\n        lmst = self.cur_sidereal(self.longitude)\n        fp.write(\"\
      %s,\" % lmst)\n        fp.write(\"%d,\" % cf)\n        for i in range(len(val)):\n\
      \            fp.write(\"%11.9f\" % val[i])\n            if (i < (len(val)-1)):\n\
      \                fp.write(\",\")\n        fp.write(\"\\n\")\n\n    def work(self,\
      \ input_items, output_items):\n        \"\"\"Accumulate and log FFT buffers\"\
      \"\"\n        \n        #\n        # If we've just switched frequency, discard\
      \ input for one\n        #  cycle\n        #\n        if (self.current != self.frequency):\n\
      \            self.current = self.frequency\n            return (len(input_items[0]))\n\
      \n        curf = int(self.frequency/1.0e6)\n        \n        #\n        # Is\
      \ a new frequency?  Initialize averaging buffers\n        #\n        if (curf\
      \ not in self.myffts):\n            self.myffts[curf] = [np.zeros(self.fftsize,dtype=np.float32),\n\
      \                np.zeros(self.fftsize,dtype=np.float32)]\n            self.mycounts[curf]\
      \ = [0,0]\n        \n        \n        for v in input_items[0]:\n          \
      \  self.myffts[curf][0] = np.add(v,self.myffts[curf][0])\n            self.mycounts[curf][0]\
      \ += 1\n            \n        for v in input_items[1]:\n            self.myffts[curf][1]\
      \ = np.add(v,self.myffts[curf][0])\n            self.mycounts[curf][1] += 1\n\
      \        \n        #\n        # This needs a complete re-do for multi-freq\n\
      \        #\n        if ((time.time() - self.last) > self.logtime):\n       \
      \     for ndx in self.myffts:\n                lva = np.divide(self.myffts[ndx][0],self.mycounts[ndx][0])\n\
      \                lvb = np.divide(self.myffts[ndx][1],self.mycounts[ndx][1])\n\
      \                \n                #\n                # Counters\n         \
      \       #\n                self.mycounts[ndx][0] = 0\n                self.mycounts[ndx][1]\
      \ = 0\n                \n                #\n                # Averaging buffers\n\
      \                #\n                self.myffts[ndx][0] = np.zeros(self.fftsize,dtype=np.float32)\n\
      \                self.myffts[ndx][1] = np.zeros(self.fftsize,dtype=np.float32)\n\
      \                \n                \n                #\n                # Form\
      \ filenames\n                #\n                fn_a = self.prefix + \"fft-A-%d-\"\
      \ % ndx\n                ltp = time.gmtime()\n                fn_a += \"%04d%02d%02d.csv\"\
      \ % (ltp.tm_year, ltp.tm_mon,\n                    ltp.tm_mday)\n          \
      \      fn_b = self.prefix + \"fft-B-%d-\" % ndx\n                fn_b += \"\
      %04d%02d%02d.csv\" % (ltp.tm_year, ltp.tm_mon,\n                    ltp.tm_mday)\n\
      \                \n                #\n                # Log the data\n     \
      \           #\n                self.do_the_log(fn_a, ltp, lva, ndx)\n      \
      \          self.do_the_log(fn_b, ltp, lvb, ndx)\n            self.last = time.time()\n\
      \            \n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    fftsize: '2048'
    frequency: dyn_freq
    logtime: logtime
    longitude: longitude
    maxoutbuf: '0'
    minoutbuf: '0'
    prefix: prefix
  states:
    _io_cache: ('FFT logger block', 'blk', [('fftsize', '2048'), ('prefix', "'./'"),
      ('longitude', '-76.03'), ('logtime', '10'), ('frequency', '1420405800.0')],
      [('0', 'float', 2048), ('1', 'float', 2048)], [], 'Embedded Python Block example
      - a simple multiply const', ['fftsize', 'frequency', 'logtime', 'longitude',
      'prefix'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1888, 332.0]
    rotation: 0
    state: true
- name: logtime
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Logging time
    short_id: ''
    type: intx
    value: '15'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1016, 68.0]
    rotation: 0
    state: true
- name: longitude
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Local longitude
    short_id: ''
    type: eng_float
    value: '-76.03'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1464, 68.0]
    rotation: 0
    state: true
- name: pacer_probe
  id: blocks_probe_signal_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 460.0]
    rotation: 0
    state: true
- name: prefix
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: File prefix
    short_id: ''
    type: str
    value: '"./"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1336, 68.0]
    rotation: 0
    state: true
- name: seconds
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Seconds runtime
    short_id: ''
    type: eng_float
    value: '600'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1840, 172.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1.0/((samp_rate/fftsize)/20)
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: fftsize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 268.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_0_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1.0/((samp_rate/fftsize)/20)
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: fftsize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 372.0]
    rotation: 0
    state: true
- name: srate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Sample rate
    short_id: ''
    type: eng_float
    value: 25e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1608, 68.0]
    rotation: 0
    state: true
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: RX2
    ant1: RX2
    ant10: RX2
    ant11: RX2
    ant12: RX2
    ant13: RX2
    ant14: RX2
    ant15: RX2
    ant16: RX2
    ant17: RX2
    ant18: RX2
    ant19: RX2
    ant2: RX2
    ant20: RX2
    ant21: RX2
    ant22: RX2
    ant23: RX2
    ant24: RX2
    ant25: RX2
    ant26: RX2
    ant27: RX2
    ant28: RX2
    ant29: RX2
    ant3: RX2
    ant30: RX2
    ant31: RX2
    ant4: RX2
    ant5: RX2
    ant6: RX2
    ant7: RX2
    ant8: RX2
    ant9: RX2
    bw0: samp_rate*0.8
    bw1: samp_rate*0.8
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: dyn_freq
    center_freq1: dyn_freq
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs_enb0: '""'
    dc_offs_enb1: '""'
    dc_offs_enb10: '""'
    dc_offs_enb11: '""'
    dc_offs_enb12: '""'
    dc_offs_enb13: '""'
    dc_offs_enb14: '""'
    dc_offs_enb15: '""'
    dc_offs_enb16: '""'
    dc_offs_enb17: '""'
    dc_offs_enb18: '""'
    dc_offs_enb19: '""'
    dc_offs_enb2: '""'
    dc_offs_enb20: '""'
    dc_offs_enb21: '""'
    dc_offs_enb22: '""'
    dc_offs_enb23: '""'
    dc_offs_enb24: '""'
    dc_offs_enb25: '""'
    dc_offs_enb26: '""'
    dc_offs_enb27: '""'
    dc_offs_enb28: '""'
    dc_offs_enb29: '""'
    dc_offs_enb3: '""'
    dc_offs_enb30: '""'
    dc_offs_enb31: '""'
    dc_offs_enb4: '""'
    dc_offs_enb5: '""'
    dc_offs_enb6: '""'
    dc_offs_enb7: '""'
    dc_offs_enb8: '""'
    dc_offs_enb9: '""'
    dev_addr: device
    dev_args: '""'
    gain0: gain
    gain1: gain
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    iq_imbal_enb0: '""'
    iq_imbal_enb1: '""'
    iq_imbal_enb10: '""'
    iq_imbal_enb11: '""'
    iq_imbal_enb12: '""'
    iq_imbal_enb13: '""'
    iq_imbal_enb14: '""'
    iq_imbal_enb15: '""'
    iq_imbal_enb16: '""'
    iq_imbal_enb17: '""'
    iq_imbal_enb18: '""'
    iq_imbal_enb19: '""'
    iq_imbal_enb2: '""'
    iq_imbal_enb20: '""'
    iq_imbal_enb21: '""'
    iq_imbal_enb22: '""'
    iq_imbal_enb23: '""'
    iq_imbal_enb24: '""'
    iq_imbal_enb25: '""'
    iq_imbal_enb26: '""'
    iq_imbal_enb27: '""'
    iq_imbal_enb28: '""'
    iq_imbal_enb29: '""'
    iq_imbal_enb3: '""'
    iq_imbal_enb30: '""'
    iq_imbal_enb31: '""'
    iq_imbal_enb4: '""'
    iq_imbal_enb5: '""'
    iq_imbal_enb6: '""'
    iq_imbal_enb7: '""'
    iq_imbal_enb8: '""'
    iq_imbal_enb9: '""'
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '2'
    norm_gain0: 'False'
    norm_gain1: 'False'
    norm_gain10: 'False'
    norm_gain11: 'False'
    norm_gain12: 'False'
    norm_gain13: 'False'
    norm_gain14: 'False'
    norm_gain15: 'False'
    norm_gain16: 'False'
    norm_gain17: 'False'
    norm_gain18: 'False'
    norm_gain19: 'False'
    norm_gain2: 'False'
    norm_gain20: 'False'
    norm_gain21: 'False'
    norm_gain22: 'False'
    norm_gain23: 'False'
    norm_gain24: 'False'
    norm_gain25: 'False'
    norm_gain26: 'False'
    norm_gain27: 'False'
    norm_gain28: 'False'
    norm_gain29: 'False'
    norm_gain3: 'False'
    norm_gain30: 'False'
    norm_gain31: 'False'
    norm_gain4: 'False'
    norm_gain5: 'False'
    norm_gain6: 'False'
    norm_gain7: 'False'
    norm_gain8: 'False'
    norm_gain9: 'False'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: A:A A:B
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 180.0]
    rotation: 0
    state: true

connections:
- [blocks_complex_to_mag_squared_0, '0', single_pole_iir_filter_xx_0, '0']
- [blocks_complex_to_mag_squared_0_0, '0', single_pole_iir_filter_xx_0_0, '0']
- [blocks_head_0, '0', blocks_stream_to_vector_0, '0']
- [blocks_head_0_0, '0', blocks_stream_to_vector_0_0, '0']
- [blocks_keep_one_in_n_0, '0', logger_0, '0']
- [blocks_keep_one_in_n_0_0, '0', logger_0, '1']
- [blocks_stream_to_vector_0, '0', fft_vxx_0, '0']
- [blocks_stream_to_vector_0_0, '0', fft_vxx_0_0, '0']
- [fft_vxx_0, '0', blocks_complex_to_mag_squared_0, '0']
- [fft_vxx_0_0, '0', blocks_complex_to_mag_squared_0_0, '0']
- [single_pole_iir_filter_xx_0, '0', blocks_keep_one_in_n_0, '0']
- [single_pole_iir_filter_xx_0_0, '0', blocks_keep_one_in_n_0_0, '0']
- [uhd_usrp_source_0, '0', blocks_head_0, '0']
- [uhd_usrp_source_0, '1', blocks_head_0_0, '0']
- [uhd_usrp_source_0, '1', pacer_probe, '0']

metadata:
  file_format: 1
